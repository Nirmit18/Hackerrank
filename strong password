#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'minimumNumber' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. STRING password
 */

int minimumNumber(int n, string password) {
int i;
vector<int>v1;
vector<int>v2;
vector<int>v3;
vector<int>v4;
int a,b,c,d;
int sum,ans,cnt=0;
for(i=0;i<password.length();i++){
    if(password[i]>=97 && password[i]<=122){
        v1.push_back(password[i]-97);
    }
    else if(password[i]>=65  && password[i]<=90){
        v2.push_back(password[i]-65);
    }
    else if(password[i]>=48 && password[i]<=57){
        v3.push_back(password[i]);
    }
    else{
        v4.push_back(password[i]);
    }
    
}
a=v1.size();
b=v2.size();
c=v3.size();
d=v4.size();
sum=a+b+c+d;
vector<int>d1={a,b,c,d};
for(i=0;i<d1.size();i++){
    if(d1[i]==0){
        cnt++;
    }
}
if(sum>=6) ans= cnt;
 if(sum<6){
     if(sum+cnt<6){
         ans=6-sum;
     }
     if(sum+cnt>6){
         ans=cnt;
     }
 }
 
 return ans;
}


int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string password;
    getline(cin, password);

    int answer = minimumNumber(n, password);

    fout << answer << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
